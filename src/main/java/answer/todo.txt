* 1~9의 숫자 중 랜덤으로 3개의 숫자를 구한다
* 사용자로부터 입력 받는 3개 숫자 예외 처리
 * 1 ~ 9의 숫자 인가
 * 중복 값이 있는가?
 * 3자리인가?
* 위치와 숫자 값이 같은 경우 = 스트라이크
* 위치는 다른데 숫자 값이 같은 경우 - 볼
* 숫자 값이 다른 경우 - 낫싱
* 사용자가 입력한 값에 대한 실행 결과를 구한다

---
com / user
123 / 456 -> nothing
123 / 245 -> 1 ball
123 / 145 -> 1 strike

비추, 이렇게했으면 기능적으로 할게 많았음(큰단위)
PlayResult result = BaseBall.play(Arrays.asList(1, 2, 3), Arrays.asList(4, 5, 6));

(작은단위)
---
com / user
1 1, 1 1 -> strike  (위치값, 값)
1 4, 2 4 -> ball
1 4, 2 5 -> nothing

팁 : 문제를 작은단위로 구현해라
숫자 전체 -> 숫자 하나하나씩
TDD가 힘들면 설계를 작은단위로 쪼갤수 없나 확인해야됨

난이도를 높힌 방법(2단계)
---
com / user
123 / 1 4 -> nothing
123 / 1 2 -> ball
123 / 1 1 -> strike

마지막 단계
com / user
123 / 456 -> nothing
123 / 245 -> 1 ball
123 / 145 -> 1 strike

★ 객체한테 메시지를 보내라!!!
상태데이터를 꺼내서 할려고 하지마라!!


private 굳이 테스트 안해도됨
만약 private부분이 로직이 복잡하면 default 접근제어자를 써서 테스트 ㄱ(같은패키지라 가능)
리플렉션으로 private 메소드 호출하는 방법도 있지만 비추
private 메소드를 꼭 테스트하고 싶으면 해당 private 메소드의 위치를 의심할것

private를 많이 만드는건 적극 추천, but 각각의 private 메소드를 다 테스트할 필욘없다
=> public 메소드로 충분히 테스트가능하기 때문에






